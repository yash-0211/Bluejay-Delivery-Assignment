# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHJN_3PHTx_pFCNaI2OZCGcgPUY_zTKY
"""

import numpy as np
import pandas as pd

data=pd.read_csv("/content/data.csv")
output= open("Output.txt",'w')
data.head()

# It is assumed that each row refers to a single Employee (commans should be removed)
data['Employee Name']

def func(name):
    # Function to removed commmas from name and capitalize 1st letter or each word
    name= name.replace(",","").title()
    return name

data['Employee Name'] = data['Employee Name'].apply(func)
data['Employee Name']

len(data['Employee Name'].unique())

"""### Employees who has worked for 7 consecutive days-
We will be considering the day as 'worked' based on the "Time" column which is expected to the Time of start of a shift
"""

print("Name and Position of Employees who have worked for 7 consecutive days:", file=output )
n,m= data.shape
i=0
worked_for_7_consecutive_days= [] # desired output
while i<n: # Looping over all rows
    name= data['Employee Name'][i]
    position= data['Position ID'][i]
    streak=1
    if data['Time'][i] is not np.nan:
        prev= int(data['Time'][i].split("/")[1])
    else:
        prev= None
    i += 1
    while i<n and data['Employee Name'][i]==name: # Looping over one Employee
        if data['Time'][i] is np.nan:
            i += 1
            continue
        this = int(data['Time'][i].split("/")[1])
        if this==prev:
            i += 1
            continue
        if this==prev+1:
            streak += 1
            if streak==7:
                worked_for_7_consecutive_days.append((name,position))
                print(name," , PositionID=",position, file= output)
                while i<n and data['Employee Name'][i]==name:
                    # Since this employee is already added to our list, we skip rows with his/her name
                    i += 1
                break
        else:
            # streak breaks if this != prev+1
            streak=1
        i += 1
        prev= this
print("---------------------------------------------------------------------------------------", file=output)

worked_for_7_consecutive_days

"""### Employees who have less than 10 hours of time between shifts but greater than 1 hour"""

def time_diff(t1,t2):
    # Function to calculate the time difference(in hours) and check whether it fulfils our condition
    if t1 is np.nan or t2 is np.nan:
        return False

    date1, time1, p1= t1.split(" ")
    date2, time2, p2= t2.split(" ")
    hour1,min1= (time1.split(":"))
    hour2, min2= time2.split(":")
    hour1, min1, hour2, min2 = int(hour1), int(min1), int(hour2), int(min2)

    if p1=="PM":
        hour1 += 12
    if p2=="PM":
        hour2 += 12

    day_diff= int(date1.split("/")[1])-int(date2.split("/")[1])
    if day_diff>=2: return False
    if day_diff==0:
        net_diff= hour2-hour1
    else:
        net_diff= 24-hour1 + hour2
    if net_diff>1 and net_diff<10:
        return True
    return False


print("Name and Position of employees who have less than 10 hours of time between shifts but greater than 1 hour:", file=output )
time_between_shifts = []
i= 0
while i<n:
    # We calculate the difference b/w "Time" of current row and "Time Out" of previous row
    name= data['Employee Name'][i]
    position= data['Position ID'][i]
    prev_tout= data['Time Out'][i]
    i += 1
    while i<n and data['Employee Name'][i]==name:
        if  time_diff(prev_tout, data['Time'][i]):
            time_between_shifts.append((name, position))
            print(name," , PositionID=",position, file= output)
            while i<n and data['Employee Name'][i]==name:
                i += 1
            break
        prev_tout= data['Time Out'][i]
        i += 1
print("---------------------------------------------------------------------------------------", file=output)
time_between_shifts

"""
### Employees who has worked for more than 14 hours in a single shift-"""

print("Name and position of employees who have worked for more than 14 hours in a single shift:", file=output)
worked_for_14hrs_shift= []
i=0
while i<n:
    time= data['Timecard Hours (as Time)'][i]
    name= data['Employee Name'][i]
    position= data['Position ID'][i]
    if time is np.nan or name is np.nan:
        i += 1
        continue
    time= int(time.split(":")[0])
    if time>=14:
        worked_for_14hrs_shift.append((name, position))
        print(name," , PositionID=",position, file= output)
        while i<n and data['Employee Name'][i]==name:
            i += 1
        continue
    i += 1
print("---------------------------------------------------------------------------------------", file=output)
worked_for_14hrs_shift